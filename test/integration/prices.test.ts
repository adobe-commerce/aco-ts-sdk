/**
 * Copyright 2025 Adobe. All Rights Reserved.
 *
 * This file is licensed to you under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the License for
 * the specific language governing permissions and limitations under the License.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) using custom templates.
 * Generator configuration can be found in the /generator directory.
 *
 * Do not edit this file manually!
 */

import { config } from 'dotenv';
import { describe, test, beforeAll, expect } from 'vitest';
import { Client, createClient } from '../../src/client';
import {
  FeedPrices,
  Environment,
  Region,
  ClientConfig,
  LogLevel,
  DiscountsFinalPrice,
  DiscountsPercentage,
  TierFinalPrice,
  TierPercentage,
  FeedPricesUpdate,
} from '../../src/types';
import { consoleLogger } from '../../src/logger';

config();

const requiredEnvVars = ['IMS_CLIENT_ID', 'IMS_CLIENT_SECRET', 'TENANT_ID', 'REGION', 'ENVIRONMENT'];

for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    throw new Error(`Missing required environment variable: ${envVar}`);
  }
}

describe('Prices Integration Tests', () => {
  let client: Client;

  const price1: FeedPrices = {
    sku: 'EXAMPLE-SKU-001',
    priceBookId: 'default',
    regular: 99.99,
  };

  const price2: FeedPrices = {
    sku: 'EXAMPLE-SKU-001',
    priceBookId: 'vip',
    regular: 79.99,
  };

  const finalPriceDiscount: DiscountsFinalPrice = {
    code: 'DISCOUNT-CODE-001',
    price: 59.99,
  };

  const percentageDiscount: DiscountsPercentage = {
    code: 'DISCOUNT-CODE-001',
    percentage: 10,
  };

  const discountPrice: FeedPrices = {
    sku: 'EXAMPLE-SKU-002',
    priceBookId: 'vip',
    regular: 59.99,
    discounts: [finalPriceDiscount, percentageDiscount],
  };

  const tierFinalPrice: TierFinalPrice = {
    qty: 25,
    price: 39.99,
  };

  const tierPercentagePrice: TierPercentage = {
    qty: 10,
    percentage: 10,
  };

  const tieredPrice: FeedPrices = {
    sku: 'EXAMPLE-SKU-003',
    priceBookId: 'default',
    regular: 59.99,
    tierPrices: [tierFinalPrice, tierPercentagePrice],
  };

  beforeAll(() => {
    const config: ClientConfig = {
      credentials: {
        clientId: process.env.IMS_CLIENT_ID!,
        clientSecret: process.env.IMS_CLIENT_SECRET!,
      },
      tenantId: process.env.TENANT_ID!,
      region: process.env.REGION as Region,
      environment: process.env.ENVIRONMENT as Environment,
      logger: consoleLogger(LogLevel.DEBUG),
    };

    client = createClient(config);
  });

  test('should create prices', async () => {
    const response = await client.createPrices([price1, price2, discountPrice, tieredPrice]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(4);
  });

  test('should update prices', async () => {
    const priceUpdate1: FeedPricesUpdate = {
      sku: 'EXAMPLE-SKU-001',
      priceBookId: 'default',
      regular: 109.99,
    };

    const priceUpdate2: FeedPricesUpdate = {
      sku: 'EXAMPLE-SKU-001',
      priceBookId: 'vip',
      regular: 59.99,
    };

    const discountPriceUpdate: FeedPricesUpdate = {
      sku: 'EXAMPLE-SKU-002',
      priceBookId: 'vip',
      regular: 159.99,
      discounts: [finalPriceDiscount, percentageDiscount],
    };

    const tieredPriceUpdate: FeedPricesUpdate = {
      sku: 'EXAMPLE-SKU-003',
      priceBookId: 'default',
      regular: 69.99,
      tierPrices: [tierFinalPrice, tierPercentagePrice],
    };

    const response = await client.updatePrices([priceUpdate1, priceUpdate2, discountPriceUpdate, tieredPriceUpdate]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(4);
  });

  test('should delete prices', async () => {
    const response = await client.deletePrices([
      { sku: price1.sku, priceBookId: price1.priceBookId },
      { sku: price2.sku, priceBookId: price2.priceBookId },
      { sku: discountPrice.sku, priceBookId: discountPrice.priceBookId },
      { sku: tieredPrice.sku, priceBookId: tieredPrice.priceBookId },
    ]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(4);
  });
});
