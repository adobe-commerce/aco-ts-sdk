/**
 * Copyright 2025 Adobe. All Rights Reserved.
 *
 * This file is licensed to you under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the License for
 * the specific language governing permissions and limitations under the License.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) using custom templates.
 * Generator configuration can be found in the /generator directory.
 *
 * Do not edit this file manually!
 */

import { config } from 'dotenv';
import { describe, test, beforeAll, expect } from 'vitest';
import { Client, createClient } from '../../src/client';
import { FeedCategory, FeedCategoryUpdate, Environment, Region, ClientConfig, LogLevel } from '../../src/types';
import { consoleLogger } from '../../src/logger';

config();

const requiredEnvVars = ['IMS_CLIENT_ID', 'IMS_CLIENT_SECRET', 'TENANT_ID', 'REGION', 'ENVIRONMENT'];

for (const envVar of requiredEnvVars) {
  if (!process.env[envVar]) {
    throw new Error(`Missing required environment variable: ${envVar}`);
  }
}

describe('Categories Integration Tests', () => {
  let client: Client;

  const topLevelCategory1: FeedCategory = {
    slug: 'electronics',
    source: { locale: 'en-US' },
    name: 'Electronics',
    families: ['tech-products'],
  };

  const topLevelCategory2: FeedCategory = {
    slug: 'clothing',
    source: { locale: 'en-US' },
    name: 'Clothing',
  };

  const childCategory1: FeedCategory = {
    slug: 'electronics/computers',
    source: { locale: 'en-US' },
    name: 'Computers',
    families: ['tech-products'],
  };

  const childCategory2: FeedCategory = {
    slug: 'electronics/phones',
    source: { locale: 'en-US' },
    name: 'Phones',
    families: ['tech-products'],
  };

  const nestedCategory1: FeedCategory = {
    slug: 'electronics/computers/laptops',
    source: { locale: 'en-US' },
    name: 'Laptops',
    families: ['tech-products'],
  };

  const nestedCategory2: FeedCategory = {
    slug: 'electronics/computers/desktops',
    source: { locale: 'en-US' },
    name: 'Desktops',
    families: ['tech-products'],
  };

  const childCategory3: FeedCategory = {
    slug: 'clothing/mens',
    source: { locale: 'en-US' },
    name: "Men's Clothing",
  };

  const childCategory4: FeedCategory = {
    slug: 'clothing/womens',
    source: { locale: 'en-US' },
    name: "Women's Clothing",
  };

  beforeAll(() => {
    const config: ClientConfig = {
      credentials: {
        clientId: process.env.IMS_CLIENT_ID!,
        clientSecret: process.env.IMS_CLIENT_SECRET!,
      },
      tenantId: process.env.TENANT_ID!,
      region: process.env.REGION as Region,
      environment: process.env.ENVIRONMENT as Environment,
      logger: consoleLogger(LogLevel.DEBUG),
    };

    client = createClient(config);
  });

  test('should create top-level categories', async () => {
    const response = await client.createCategories([topLevelCategory1, topLevelCategory2]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(2);
  });

  test('should create child categories', async () => {
    const response = await client.createCategories([childCategory1, childCategory2, childCategory3, childCategory4]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(4);
  });

  test('should create nested categories', async () => {
    const response = await client.createCategories([nestedCategory1, nestedCategory2]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(2);
  });

  test('should update categories', async () => {
    const categoryUpdate1: FeedCategoryUpdate = {
      slug: 'electronics',
      source: { locale: 'en-US' },
      name: 'Updated Electronics',
      families: ['tech-products', 'gadgets'],
    };

    const categoryUpdate2: FeedCategoryUpdate = {
      slug: 'clothing',
      source: { locale: 'en-US' },
      name: 'Updated Clothing',
    };

    const response = await client.updateCategories([categoryUpdate1, categoryUpdate2]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(2);
  });

  test('should delete categories', async () => {
    const response = await client.deleteCategories([
      { slug: topLevelCategory1.slug, source: topLevelCategory1.source },
      { slug: topLevelCategory2.slug, source: topLevelCategory2.source },
    ]);
    expect(response).toBeDefined();
    expect(response.ok).toBe(true);
    expect(response.status).toBe(200);
    expect(response.statusText).toBe('OK');
    expect(response.data.status).toBe('ACCEPTED');
    expect(response.data.acceptedCount).toBe(2);
  });
});
