{{>licenseInfo}}

import { describe, it, expect, vi, beforeEach, Mock } from 'vitest';
import { createClient } from '../../src/client';
import { createHttpClient } from '../../src/http-client';
import { createAuthService } from '../../src/auth';
import {
{{#models}}
{{#model}}
  {{classname}},
{{/model}}
{{/models}}
  ApiResponse,
  ClientConfig,
  FeedMetadataDataTypeEnum,
  FeedProductStatusEnum,
  FeedProductVisibleInEnum,
  FeedMetadataVisibleInEnum,
} from '../../src/types';

// Mock the dependencies
vi.mock('../../src/http-client');
vi.mock('../../src/auth');

describe('Client', () => {
  const mockCredentials = {
    clientId: 'test-client-id',
    clientSecret: 'test-client-secret',
    scopes: 'test-scopes',
  };
  const mockTenantId = 'test-tenant-id';
  const mockRegion = 'na1';
  const mockEnvironment = 'sandbox';

  const mockHttpClient = {
    request: vi.fn(),
  };

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const createMockData = (operationName: string): any[] => {
    const baseMock = {
      source: { locale: 'en-US' }
    };

    switch (operationName) {
      case 'createProductMetadata':
      case 'updateProductMetadata':
        return [{
          ...baseMock,
          code: 'test-attribute',
          label: 'Test Attribute',
          dataType: FeedMetadataDataTypeEnum.Text,
          visibleIn: [FeedMetadataVisibleInEnum.ProductDetail],
          filterable: true,
          sortable: true,
          searchable: true,
          searchWeight: 1,
          searchTypes: ['AUTOCOMPLETE']
        }];

      case 'deleteProductMetadata':
        return [{
          ...baseMock,
          code: 'test-attribute'
        }];

      case 'createProducts':
      case 'updateProducts':
        return [{
          ...baseMock,
          sku: 'test-sku',
          name: 'Test Product',
          slug: 'test-product',
          description: 'This is a test product created via the SDK',
          shortDescription: 'test product',
          status: FeedProductStatusEnum.Enabled,
          visibleIn: [FeedProductVisibleInEnum.Catalog, FeedProductVisibleInEnum.Search],
          attributes: [
            {
              code: 'brand',
              values: ['Test Brand']
            },
            {
              code: 'category',
              values: ['Electronics']
            }
          ],
          images: [
            {
              url: 'https://example.com/image.jpg',
              label: 'Test Product Image',
              roles: ['BASE', 'SMALL'],
              customRoles: ['widget']
            }
          ],
          links: [
            {
              type: 'VARIANT_OF',
              sku: 'parent-product'
            }
          ],
          routes: [
            {
              path: 'path/to/test-sku',
              position: 2
            }
          ]
        }];

      case 'deleteProducts':
        return [{
          ...baseMock,
          sku: 'test-sku'
        }];

      case 'createPrices':
      case 'updatePrices':
        return [{
          sku: 'test-sku',
          priceBookId: 'test-pricebook',
          price: 99.99
        }];

      case 'deletePrices':
        return [{
          sku: 'test-sku',
          priceBookId: 'test-pricebook'
        }];

      case 'createPriceBooks':
      case 'updatePriceBooks':
      case 'deletePriceBooks':
        return [{
          priceBookId: 'test-pricebook',
          name: 'Test Price Book',
          currency: 'USD'
        }];

      default:
        return [{}];
    }
  };

  beforeEach(() => {
    vi.clearAllMocks();
    (createHttpClient as Mock).mockReturnValue(mockHttpClient);
    (createAuthService as Mock).mockReturnValue({});
  });

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
  describe('{{nickname}}', () => {
    it('should call the correct endpoint with {{httpMethod}} method', async () => {
      const config: ClientConfig = {
        credentials: mockCredentials,
        tenantId: mockTenantId,
        region: mockRegion,
        environment: mockEnvironment,
      };
      const client = createClient(config);
      const mockData = createMockData('{{nickname}}');
      const mockResponse: ApiResponse = {
        ok: true,
        status: 200,
        statusText: 'OK',
        data: {
          status: 'ACCEPTED',
          acceptedCount: 1,
        },
      };

      mockHttpClient.request.mockResolvedValue(mockResponse);

      const result = await client.{{nickname}}(mockData);

      expect(mockHttpClient.request).toHaveBeenCalledWith('{{{path}}}', {
        method: '{{httpMethod}}',
        {{#hasBodyParam}}
        body: JSON.stringify(mockData),
        {{/hasBodyParam}}
      });
      expect(result).toEqual(mockResponse);
    });
  });

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
});