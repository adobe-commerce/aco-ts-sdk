{{>licenseInfo}}

{{#models}}
{{#model}}
{{#isEnum}}
/**
 * {{{description}}}
 * @export
 * @enum {string}
 */
export enum {{classname}} {
{{#allowableValues}}
{{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
{{/enumVars}}
{{/allowableValues}}
}
{{/isEnum}}
{{^isEnum}}
/**
 * {{{description}}}
 * @export
 * @interface {{classname}}
 */
export interface {{classname}} {
{{#vars}}
  /**
   * {{{description}}}
   * @type {{=<% %>=}}{<%#isEnum%><%#isArray%><%classname%><%#lambda.titlecase%><%name%><%/lambda.titlecase%>Enum[]<%/isArray%><%^isArray%><%classname%><%#lambda.titlecase%><%name%><%/lambda.titlecase%>Enum<%/isArray%><%/isEnum%><%^isEnum%><%dataType%><%/isEnum%>}<%={{ }}=%>
   * @memberof {{classname}}
   */
  {{#isReadOnly}}readonly {{/isReadOnly}}{{name}}{{^required}}?{{/required}}: {{#isEnum}}{{#isArray}}{{classname}}{{#lambda.titlecase}}{{name}}{{/lambda.titlecase}}Enum[]{{/isArray}}{{^isArray}}{{classname}}{{#lambda.titlecase}}{{name}}{{/lambda.titlecase}}Enum{{/isArray}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}};
{{/vars}}
}
{{/isEnum}}
{{/model}}
{{/models}}

// Manually define any enum types that are referenced but not generated
{{#models}}
{{#model}}
{{^isEnum}}
{{#vars}}
{{#isEnum}}
{{#items.isEnum}}
/**
 * Enum for {{classname}}.{{name}}
 * @export
 * @enum {string}
 */
export enum {{classname}}{{#lambda.titlecase}}{{name}}{{/lambda.titlecase}}Enum {
{{#items}}
{{#allowableValues}}
{{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
{{/enumVars}}
{{/allowableValues}}
{{/items}}
}
{{/items.isEnum}}
{{^items.isEnum}}
/**
 * Enum for {{classname}}.{{name}}
 * @export
 * @enum {string}
 */
export enum {{classname}}{{#lambda.titlecase}}{{name}}{{/lambda.titlecase}}Enum {
{{#allowableValues}}
{{#enumVars}}
  {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
{{/enumVars}}
{{/allowableValues}}
}
{{/items.isEnum}}
{{/isEnum}}
{{/vars}}
{{/isEnum}}
{{/model}}
{{/models}}

/**
 * Adobe IMS credentials
 *
 * @param clientId - The client ID for the API requests
 * @param clientSecret - The client secret for the API requests
 */
export interface AdobeCredentials {
  clientId: string;
  clientSecret: string;
}

export type Region = 'na1';

export type Environment = 'production' | 'sandbox';

/**
 * Client configuration
 *
 * @param credentials - Adobe IMS credentials for authentication
 * @param tenantId - The tenant ID for the API requests
 * @param region - The region for the API endpoint (e.g., 'us', 'eu')
 * @param environment - The environment to use ('production' or 'sandbox')
 * @param timeoutMs - The timeout for the API requests. Default is 10000ms.
 * @param logger - Optional logger for customizing logging behavior. Default is consoleLogger(LogLevel.INFO).
 */
export interface ClientConfig {
  credentials: AdobeCredentials;
  tenantId: string;
  region: Region;
  environment: Environment;
  timeoutMs?: number;
  logger?: Logger;
}

/**
 * API response
 *
 * @param ok - Whether the request was successful
 * @param status - The status code of the response
 * @param statusText - The status text of the response
 * @param data - The processed feed response data
 */
export interface ApiResponse {
  ok: boolean;
  status: number;
  statusText: string;
  data: ProcessFeedResponse;
}

/**
 * Logger interface for customizing logging behavior
 *
 * @param debug - Log a debug message
 * @param info - Log an info message
 * @param warn - Log a warning message
 * @param error - Log an error message
 */
export interface Logger {
  debug(message: string, meta?: Record<string, unknown>): void;
  info(message: string, meta?: Record<string, unknown>): void;
  warn(message: string, meta?: Record<string, unknown>): void;
  error(message: string, error?: Error, meta?: Record<string, unknown>): void;
}

/**
 * Log level
 *
 * @param DEBUG - Debug log level
 * @param INFO - Info log level
 * @param WARN - Warning log level
 * @param ERROR - Error log level
 */
export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
}
