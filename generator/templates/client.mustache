{{>licenseInfo}}

import { config } from 'dotenv';
import { createAuthService } from './auth';
import { createHttpClient, DEFAULT_TIMEOUT_MS, HttpClientConfig } from './http-client';
import { consoleLogger } from './logger';
import {
  AdobeCredentials,
  Region,
  Environment,
  ClientConfig,
  ApiResponse,
{{#models}}
{{#model}}
  {{classname}},
{{/model}}
{{/models}}
} from './types';

export interface Client {
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
  /**
   * {{summary}}
   {{#notes}}
   * {{&notes}}
   {{/notes}}
   * @param data - {{#allParams}}{{#isBodyParam}}{{{dataType}}}{{/isBodyParam}}{{/allParams}} payload
   * @returns {Promise<ApiResponse>} feed response indicating the number of accepted items
   * @throws {Error} if the API request fails
   */
  {{nickname}}({{#allParams}}{{#isBodyParam}}data: {{{dataType}}}{{/isBodyParam}}{{/allParams}}): Promise<ApiResponse>;
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

/**
 * Creates a client instance for interacting with the Adobe Commerce Optimizer API.
 *
 * @example
 *   ```typescript
 *   // Define your configuration
 *   const config = {
 *     credentials: {
 *       clientId: process.env.IMS_CLIENT_ID!,
 *       clientSecret: process.env.IMS_CLIENT_SECRET!,
 *     },
 *     tenantId: process.env.TENANT_ID!,
 *     region: process.env.REGION as Region,
 *     environment: process.env.ENVIRONMENT as Environment,
 *   };
 *
 *   // Initialize the client instance
 *   const client = createClient(config);
 *
 *   // Use the client to interact with the API
 *   const response = await client.createProducts([product]);
 *   ```;
 *
 * @param clientConfig {ClientConfig} - SDK client configuration and authentication credentials
 * @returns {Client} A client instance with methods for interacting with the API
 */
export function createClient(clientConfig: ClientConfig): Client {
  const {
    credentials,
    tenantId,
    region,
    environment,
    timeoutMs = DEFAULT_TIMEOUT_MS,
    logger = consoleLogger(),
  } = clientConfig;

  // Read .env overrides if present
  config();
  const auth = createAuthService(credentials, process.env.IMS_BASE_URL_OVERRIDE ?? undefined);
  const httpConfig: HttpClientConfig = {
    auth,
    tenantId,
    region,
    environment,
    timeoutMs,
    logger,
  };
  const http = createHttpClient(httpConfig);

  return {
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
    async {{nickname}}({{#allParams}}{{#isBodyParam}}data: {{{dataType}}}{{/isBodyParam}}{{/allParams}}): Promise<ApiResponse> {
      return await http.request(`{{{path}}}`, {
        method: '{{httpMethod}}',
        {{#hasBodyParam}}
        body: JSON.stringify(data),
        {{/hasBodyParam}}
      });
    },

{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
  };
}
