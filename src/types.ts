/**
 * Copyright 2025 Adobe. All Rights Reserved.
 *
 * This file is licensed to you under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the License for
 * the specific language governing permissions and limitations under the License.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) using custom templates.
 * Generator configuration can be found in the /generator directory.
 *
 * Do not edit this file manually!
 */

/**
 * @export
 * @interface DiscountsFinalPrice
 */
export interface DiscountsFinalPrice {
  /**
   * @memberof DiscountsFinalPrice
   * @type {string}
   */
  code?: string;
  /**
   * @memberof DiscountsFinalPrice
   * @type {number}
   */
  price?: number;
}
/**
 * @export
 * @interface DiscountsPercentage
 */
export interface DiscountsPercentage {
  /**
   * @memberof DiscountsPercentage
   * @type {string}
   */
  code?: string;
  /**
   * @memberof DiscountsPercentage
   * @type {number}
   */
  percentage?: number;
}
/**
 * @export
 * @interface FeedItemFailedValidationResult
 */
export interface FeedItemFailedValidationResult {
  /**
   * Code name of invalid field.
   *
   * @memberof FeedItemFailedValidationResult
   * @type {string}
   */
  code?: string;
  /**
   * Reference to the line item with an invalid payload. The line count begins at 0.
   *
   * @memberof FeedItemFailedValidationResult
   * @type {number}
   */
  itemIndex?: number;
  /**
   * Error description
   *
   * @memberof FeedItemFailedValidationResult
   * @type {string}
   */
  message?: string;
  /**
   * Original value passed in the request.
   *
   * @memberof FeedItemFailedValidationResult
   * @type {string}
   */
  value?: string;
}
/**
 * Metadata information for a product attribute.
 *
 * @export
 * @interface FeedMetadata
 */
export interface FeedMetadata {
  /**
   * Attribute code
   *
   * @memberof FeedMetadata
   * @type {string}
   */
  code: string;
  /**
   * @memberof FeedMetadata
   * @type {Scope}
   */
  scope: Scope;
  /**
   * Determines how the attribute is used on the storefront. * `PRODUCT_DETAIL`: Product attribute is visible on the
   * Product Detail Page. * `PRODUCT_LISTING`: Product attribute is visible on Product Listing Page. * `SEARCH_RESULTS`:
   * Product attribute is visible on Search Results Page. * `PRODUCT_COMPARE`: Product attribute is visible on Product
   * Compare Page.
   *
   * @memberof FeedMetadata
   * @type {FeedMetadataVisibleInEnum[]}
   */
  visibleIn?: FeedMetadataVisibleInEnum[];
  /**
   * Label for the attribute that is displayed in user interfaces.
   *
   * @memberof FeedMetadata
   * @type {string}
   */
  label: string;
  /**
   * Data type
   *
   * @memberof FeedMetadata
   * @type {FeedMetadataDataTypeEnum}
   */
  dataType: FeedMetadataDataTypeEnum;
  /**
   * Indicates whether the attribute can be used to filter products.
   *
   * @memberof FeedMetadata
   * @type {boolean}
   */
  filterable?: boolean;
  /**
   * Indicates whether the attribute can be used to sort products.
   *
   * @memberof FeedMetadata
   * @type {boolean}
   */
  sortable?: boolean;
  /**
   * Indicates whether the attribute value can be used in search queries to filter results.
   *
   * @memberof FeedMetadata
   * @type {boolean}
   */
  searchable?: boolean;
  /**
   * The weight associated with a searchable attribute. Attributes with a greater weight are returned before attributes
   * with a lower weight.
   *
   * @memberof FeedMetadata
   * @type {number}
   */
  searchWeight?: number;
  /**
   * Search types associated with this attribute, for example: `autocomplete`, `starts_with`, and so on.
   *
   * @memberof FeedMetadata
   * @type {FeedMetadataSearchTypesEnum[]}
   */
  searchTypes?: FeedMetadataSearchTypesEnum[];
}
/**
 * Delete metadata information for a product attribute.
 *
 * @export
 * @interface FeedMetadataDelete
 */
export interface FeedMetadataDelete {
  /**
   * Attribute code
   *
   * @memberof FeedMetadataDelete
   * @type {string}
   */
  code: string;
  /**
   * @memberof FeedMetadataDelete
   * @type {Scope}
   */
  scope: Scope;
}
/**
 * Metadata information for a product attribute.
 *
 * @export
 * @interface FeedMetadataUpdate
 */
export interface FeedMetadataUpdate {
  /**
   * Attribute code
   *
   * @memberof FeedMetadataUpdate
   * @type {string}
   */
  code: string;
  /**
   * @memberof FeedMetadataUpdate
   * @type {Scope}
   */
  scope: Scope;
  /**
   * Determines how the attribute is used on the storefront. * `PRODUCT_DETAIL`: Product attribute is visible on the
   * Product Detail Page. * `PRODUCT_LISTING`: Product attribute is visible on Product Listing Page. * `SEARCH_RESULTS`:
   * Product attribute is visible on Search Results Page. * `PRODUCT_COMPARE`: Product attribute is visible on Product
   * Compare Page.
   *
   * @memberof FeedMetadataUpdate
   * @type {FeedMetadataUpdateVisibleInEnum[]}
   */
  visibleIn?: FeedMetadataUpdateVisibleInEnum[];
  /**
   * Label for the attribute that is displayed in user interfaces.
   *
   * @memberof FeedMetadataUpdate
   * @type {string}
   */
  label?: string;
  /**
   * Data type
   *
   * @memberof FeedMetadataUpdate
   * @type {FeedMetadataUpdateDataTypeEnum}
   */
  dataType?: FeedMetadataUpdateDataTypeEnum;
  /**
   * Indicates whether the attribute can be used to filter products.
   *
   * @memberof FeedMetadataUpdate
   * @type {boolean}
   */
  filterable?: boolean;
  /**
   * Indicates whether the attribute can be used to sort products.
   *
   * @memberof FeedMetadataUpdate
   * @type {boolean}
   */
  sortable?: boolean;
  /**
   * Indicates whether the attribute value can be used in search queries to filter results.
   *
   * @memberof FeedMetadataUpdate
   * @type {boolean}
   */
  searchable?: boolean;
  /**
   * The weight associated with a searchable attribute. Attributes with a greater weight are returned before attributes
   * with a lower weight.
   *
   * @memberof FeedMetadataUpdate
   * @type {number}
   */
  searchWeight?: number;
  /**
   * Search types associated with this attribute, for example: `autocomplete`, `starts_with`, and so on.
   *
   * @memberof FeedMetadataUpdate
   * @type {FeedMetadataUpdateSearchTypesEnum[]}
   */
  searchTypes?: FeedMetadataUpdateSearchTypesEnum[];
}
/**
 * Price book information
 *
 * @export
 * @interface FeedPricebook
 */
export interface FeedPricebook {
  /**
   * Child price book id
   *
   * @memberof FeedPricebook
   * @type {string}
   */
  priceBookId: string;
  /**
   * Price book name
   *
   * @memberof FeedPricebook
   * @type {string}
   */
  name: string;
  /**
   * Price book currency
   *
   * @memberof FeedPricebook
   * @type {string}
   */
  currency: string;
  /**
   * Base price book id
   *
   * @memberof FeedPricebook
   * @type {string}
   */
  parentId: string;
}
/**
 * Price book information
 *
 * @export
 * @interface FeedPricebookDelete
 */
export interface FeedPricebookDelete {
  /**
   * Price book id
   *
   * @memberof FeedPricebookDelete
   * @type {string}
   */
  priceBookId: string;
}
/**
 * Product price information.
 *
 * @export
 * @interface FeedPrices
 */
export interface FeedPrices {
  /**
   * Product SKU
   *
   * @memberof FeedPrices
   * @type {string}
   */
  sku: string;
  /**
   * Price book id
   *
   * @memberof FeedPrices
   * @type {string}
   */
  priceBookId: string;
  /**
   * Regular price
   *
   * @memberof FeedPrices
   * @type {number}
   */
  regular: number;
  /**
   * Active discounts
   *
   * @memberof FeedPrices
   * @type {FeedPricesDiscountsInner[]}
   */
  discounts?: FeedPricesDiscountsInner[];
}
/**
 * Delete product price information.
 *
 * @export
 * @interface FeedPricesDelete
 */
export interface FeedPricesDelete {
  /**
   * Product SKU
   *
   * @memberof FeedPricesDelete
   * @type {string}
   */
  sku: string;
  /**
   * Price book id
   *
   * @memberof FeedPricesDelete
   * @type {string}
   */
  priceBookId: string;
}
/**
 * @export
 * @interface FeedPricesDiscountsInner
 */
export interface FeedPricesDiscountsInner {
  /**
   * @memberof FeedPricesDiscountsInner
   * @type {string}
   */
  code?: string;
  /**
   * @memberof FeedPricesDiscountsInner
   * @type {number}
   */
  price?: number;
  /**
   * @memberof FeedPricesDiscountsInner
   * @type {number}
   */
  percentage?: number;
}
/**
 * Product price information.
 *
 * @export
 * @interface FeedPricesUpdate
 */
export interface FeedPricesUpdate {
  /**
   * Product SKU
   *
   * @memberof FeedPricesUpdate
   * @type {string}
   */
  sku: string;
  /**
   * Price book id
   *
   * @memberof FeedPricesUpdate
   * @type {string}
   */
  priceBookId: string;
  /**
   * Regular price
   *
   * @memberof FeedPricesUpdate
   * @type {number}
   */
  regular?: number;
  /**
   * Active discounts
   *
   * @memberof FeedPricesUpdate
   * @type {FeedPricesDiscountsInner[]}
   */
  discounts?: FeedPricesDiscountsInner[];
}
/**
 * @export
 * @interface FeedProduct
 */
export interface FeedProduct {
  /**
   * SKU (Stock Keeping Unit) is a unique identifier for a product.
   *
   * @memberof FeedProduct
   * @type {string}
   */
  sku: string;
  /**
   * @memberof FeedProduct
   * @type {Scope}
   */
  scope: Scope;
  /**
   * Product name
   *
   * @memberof FeedProduct
   * @type {string}
   */
  name: string;
  /**
   * The URL key for the product.
   *
   * @memberof FeedProduct
   * @type {string}
   */
  slug: string;
  /**
   * The main description for the product
   *
   * @memberof FeedProduct
   * @type {string}
   */
  description?: string;
  /**
   * A short description of the product
   *
   * @memberof FeedProduct
   * @type {string}
   */
  shortDescription?: string;
  /**
   * Indicates whether the product is visible on the storefront. The value is "Enabled" if it is visible, and "Disabled"
   * if it is not visible.
   *
   * @memberof FeedProduct
   * @type {FeedProductStatusEnum}
   */
  status: FeedProductStatusEnum;
  /**
   * Storefront area where the product is visible. An empty list means that it is not visible as a stand alone product.
   *
   * - `CATALOG`: Product is visible on Product Listing Page and Product Detail Page. * `SEARCH`: Product is visible on
   *   Search Results Page and Product Detail Page.
   *
   * @memberof FeedProduct
   * @type {FeedProductVisibleInEnum[]}
   */
  visibleIn?: FeedProductVisibleInEnum[];
  /**
   * Meta attributes that are specified in <meta> tags.
   *
   * @memberof FeedProduct
   * @type {ProductMetaAttribute[]}
   */
  metaTags?: ProductMetaAttribute[];
  /**
   * A list of product attributes.
   *
   * @memberof FeedProduct
   * @type {ProductAttribute[]}
   */
  attributes?: ProductAttribute[];
  /**
   * A list of product images.
   *
   * @memberof FeedProduct
   * @type {ProductImage[]}
   */
  images?: ProductImage[];
  /**
   * A list of linked SKUs.
   *
   * @memberof FeedProduct
   * @type {ProductLink[]}
   */
  links?: ProductLink[];
  /**
   * A list of product routes.
   *
   * @memberof FeedProduct
   * @type {ProductRoutes[]}
   */
  routes?: ProductRoutes[];
  /**
   * Composite products, such as configurable products, must provide a list of product options that a shopper can select
   * (for example, "color", "size", etc.).
   *
   * @memberof FeedProduct
   * @type {ProductConfiguration[]}
   */
  configurations?: ProductConfiguration[];
  /**
   * Composite products, such as bundle products, must include a list of individual products that are part of the
   * bundle, organized into groups (for example, "shirts", "pants", "accessories").
   *
   * @memberof FeedProduct
   * @type {ProductBundle[]}
   */
  bundles?: ProductBundle[];
}
/**
 * @export
 * @interface FeedProductDelete
 */
export interface FeedProductDelete {
  /**
   * Product unique identifier
   *
   * @memberof FeedProductDelete
   * @type {string}
   */
  sku: string;
  /**
   * @memberof FeedProductDelete
   * @type {Scope}
   */
  scope: Scope;
}
/**
 * @export
 * @interface FeedProductUpdate
 */
export interface FeedProductUpdate {
  /**
   * SKU (Stock Keeping Unit) is a unique identifier for a product.
   *
   * @memberof FeedProductUpdate
   * @type {string}
   */
  sku: string;
  /**
   * @memberof FeedProductUpdate
   * @type {Scope}
   */
  scope: Scope;
  /**
   * Product name
   *
   * @memberof FeedProductUpdate
   * @type {string}
   */
  name?: string;
  /**
   * The URL key for the product.
   *
   * @memberof FeedProductUpdate
   * @type {string}
   */
  slug?: string;
  /**
   * The main description for the product
   *
   * @memberof FeedProductUpdate
   * @type {string}
   */
  description?: string;
  /**
   * A short description of the product
   *
   * @memberof FeedProductUpdate
   * @type {string}
   */
  shortDescription?: string;
  /**
   * Indicates whether the product is visible on the storefront. The value is "Enabled" if it is visible, and "Disabled"
   * if it is not visible.
   *
   * @memberof FeedProductUpdate
   * @type {FeedProductUpdateStatusEnum}
   */
  status?: FeedProductUpdateStatusEnum;
  /**
   * Storefront area where the product is visible. An empty list means that it is not visible as a stand alone product.
   *
   * - `CATALOG`: Product is visible on Product Listing Page and Product Detail Page. * `SEARCH`: Product is visible on
   *   Search Results Page and Product Detail Page.
   *
   * @memberof FeedProductUpdate
   * @type {FeedProductUpdateVisibleInEnum[]}
   */
  visibleIn?: FeedProductUpdateVisibleInEnum[];
  /**
   * Meta attributes that are specified in <meta> tags.
   *
   * @memberof FeedProductUpdate
   * @type {ProductMetaAttribute[]}
   */
  metaTags?: ProductMetaAttribute[];
  /**
   * A list of product attributes.
   *
   * @memberof FeedProductUpdate
   * @type {ProductAttribute[]}
   */
  attributes?: ProductAttribute[];
  /**
   * A list of product images.
   *
   * @memberof FeedProductUpdate
   * @type {ProductImage[]}
   */
  images?: ProductImage[];
  /**
   * A list of linked SKUs. For product variants, this is a required field that establishes a link between a product
   * variant and the corresponding configurable product. `VARIANT_OF` link type must be specified to establish a
   * connection to the configurable product SKU.
   *
   * @memberof FeedProductUpdate
   * @type {ProductLink[]}
   */
  links?: ProductLink[];
  /**
   * A list of product routes.
   *
   * @memberof FeedProductUpdate
   * @type {ProductRoutes[]}
   */
  routes?: ProductRoutes[];
  /**
   * Composite products, such as configurable products, must provide a list of product options that a shopper can select
   * (for example, "color", "size", etc.).
   *
   * @memberof FeedProductUpdate
   * @type {ProductConfiguration[]}
   */
  configurations?: ProductConfiguration[];
  /**
   * Composite products, such as bundle products, must include a list of individual products that are part of the
   * bundle, organized into groups (for example, "shirts", "pants", "accessories").
   *
   * @memberof FeedProductUpdate
   * @type {ProductBundle[]}
   */
  bundles?: ProductBundle[];
}
/**
 * @export
 * @interface ItemFailedValidationResult
 */
export interface ItemFailedValidationResult {
  /**
   * Code for the validation error.
   *
   * @memberof ItemFailedValidationResult
   * @type {string}
   */
  code?: string;
  /**
   * Index of the conflicting item
   *
   * @memberof ItemFailedValidationResult
   * @type {number}
   */
  itemIndex?: number;
  /**
   * Validation error message for the item.
   *
   * @memberof ItemFailedValidationResult
   * @type {string}
   */
  message?: string;
  /**
   * The value supplied to the API.
   *
   * @memberof ItemFailedValidationResult
   * @type {string}
   */
  value?: string;
}
/**
 * @export
 * @interface Model400ProcessFeedResponse
 */
export interface Model400ProcessFeedResponse {
  /**
   * Request status.
   *
   * @memberof Model400ProcessFeedResponse
   * @type {string}
   */
  status?: string;
  /**
   * Error summary.
   *
   * @memberof Model400ProcessFeedResponse
   * @type {string}
   */
  message?: string;
  /**
   * List of items that did not pass validation. Fix the payload for invalid items before resubmitting the request.
   *
   * @memberof Model400ProcessFeedResponse
   * @type {FeedItemFailedValidationResult[]}
   */
  errors?: FeedItemFailedValidationResult[];
}
/**
 * @export
 * @interface Model401Response
 */
export interface Model401Response {
  /**
   * Error title
   *
   * @memberof Model401Response
   * @type {string}
   */
  title?: string;
  /**
   * Error status code
   *
   * @memberof Model401Response
   * @type {string}
   */
  status?: string;
  /**
   * Error code
   *
   * @memberof Model401Response
   * @type {string}
   */
  errorCode?: string;
  /**
   * Error message
   *
   * @memberof Model401Response
   * @type {string}
   */
  message?: string;
}
/**
 * @export
 * @interface Model403Response
 */
export interface Model403Response {
  /**
   * Error title
   *
   * @memberof Model403Response
   * @type {string}
   */
  title?: string;
  /**
   * Error status code
   *
   * @memberof Model403Response
   * @type {string}
   */
  status?: string;
  /**
   * Error code
   *
   * @memberof Model403Response
   * @type {string}
   */
  errorCode?: string;
  /**
   * Error message
   *
   * @memberof Model403Response
   * @type {string}
   */
  message?: string;
}
/**
 * @export
 * @interface PriceBookBase
 */
export interface PriceBookBase {
  /**
   * Base price book id
   *
   * @memberof PriceBookBase
   * @type {string}
   */
  priceBookId: string;
  /**
   * Price book name
   *
   * @memberof PriceBookBase
   * @type {string}
   */
  name: string;
  /**
   * Price book currency
   *
   * @memberof PriceBookBase
   * @type {string}
   */
  currency: string;
}
/**
 * @export
 * @interface PriceBookChild
 */
export interface PriceBookChild {
  /**
   * Child price book id
   *
   * @memberof PriceBookChild
   * @type {string}
   */
  priceBookId: string;
  /**
   * Price book name
   *
   * @memberof PriceBookChild
   * @type {string}
   */
  name: string;
  /**
   * Base price book id
   *
   * @memberof PriceBookChild
   * @type {string}
   */
  parentId: string;
}
/**
 * @export
 * @interface ProcessFeedResponse
 */
export interface ProcessFeedResponse {
  /**
   * Request status.
   *
   * @memberof ProcessFeedResponse
   * @type {string}
   */
  status?: string;
  /**
   * The number of received and accepted items.
   *
   * @memberof ProcessFeedResponse
   * @type {number}
   */
  acceptedCount?: number;
}
/**
 * @export
 * @interface ProductAttribute
 */
export interface ProductAttribute {
  /**
   * Product Attribute Code
   *
   * @memberof ProductAttribute
   * @type {string}
   */
  code: string;
  /**
   * Type of attribute value to be applied during the rendering phase. Validation occurs only when the code is rendered.
   * Invalid values are ignored. - `BOOLEAN`: Accept single value: "true" or false - `NUMBER`: Accept single number,e.g.
   * "85", "0.42", etc. - `STRING`: Accept single string,e.g. "Great day, yall!" - `ARRAY`: Accept list of strings ,e.g.
   * ["red", "green", "blue"] - `OBJECT`: Accept JSON object `\"{\"name\": \"swatch\", \"color\": \"red\"}\"`
   *
   * @memberof ProductAttribute
   * @type {ProductAttributeTypeEnum}
   */
  type: ProductAttributeTypeEnum;
  /**
   * A list of value(s) associated with a specified attribute code.
   *
   * @memberof ProductAttribute
   * @type {string[]}
   */
  values: string[];
  /**
   * The variant reference ID establishes a link between a product variant and the corresponding [Option Value
   * ID](#operation/createProducts!path=options/values/id&t=request) in a configurable product. A variant reference ID
   * can be specified only for a product that represents a variant of a configurable product.
   *
   * @memberof ProductAttribute
   * @type {string}
   */
  variantReferenceId?: string;
}
/**
 * @export
 * @interface ProductBundle
 */
export interface ProductBundle {
  /**
   * Name of the group that organizes the bundle items. This helps in categorizing the items within the bundle for
   * better organization. For example, groups can be "shirts", "pants", "accessories", etc.
   *
   * @memberof ProductBundle
   * @type {string}
   */
  group: string;
  /**
   * Indicates whether a shopper is required to select any products from this group to add the bundle to the shopping
   * cart.
   *
   * @memberof ProductBundle
   * @type {boolean}
   */
  required?: boolean;
  /**
   * Indicates whether multiple products can be selected by a shopper.
   *
   * @memberof ProductBundle
   * @type {boolean}
   */
  multiSelect?: boolean;
  /**
   * A list of default product SKUs that are selected in this bundle group.
   *
   * @memberof ProductBundle
   * @type {string[]}
   */
  defaultItemSkus?: string[];
  /**
   * A list of individual products that are part of the bundle. Each item in the list represents a product that can be
   * selected as part of the bundle.
   *
   * @memberof ProductBundle
   * @type {ProductBundleItem[]}
   */
  items: ProductBundleItem[];
}
/**
 * @export
 * @interface ProductBundleItem
 */
export interface ProductBundleItem {
  /**
   * Product SKU of the bundle item.
   *
   * @memberof ProductBundleItem
   * @type {string}
   */
  sku: string;
  /**
   * Quantity of the item in the bundle.
   *
   * @memberof ProductBundleItem
   * @type {number}
   */
  qty?: number;
  /**
   * Indicates whether the quantity of the item in the bundle can be defined by a shopper.
   *
   * @memberof ProductBundleItem
   * @type {boolean}
   */
  userDefinedQty?: boolean;
}
/**
 * @export
 * @interface ProductConfiguration
 */
export interface ProductConfiguration {
  /**
   * Product option attribute code. For `CONFIGURABLE` or `SWATCH` option types, this ID must match the ["attribute
   * code"](#operation/createProducts!path=attributes/code&t=request) used for the configurable product (for example,
   * "color").
   *
   * @memberof ProductConfiguration
   * @type {string}
   */
  attributeCode: string;
  /**
   * Option label
   *
   * @memberof ProductConfiguration
   * @type {string}
   */
  label?: string;
  /**
   * Specifies the pre-selected value variant reference id of the current option.
   *
   * @memberof ProductConfiguration
   * @type {string}
   */
  defaultVariantReferenceId?: string;
  /**
   * Option type. Indicates the product type the option can be assigned to. - `CONFIGURABLE`: Configurable product
   * option - `SWATCH`: Swatch product option. Must be used for color or text swatches attributes
   *
   * @memberof ProductConfiguration
   * @type {ProductConfigurationTypeEnum}
   */
  type: ProductConfigurationTypeEnum;
  /**
   * A list of option values. Defines option values available to shoppers (for example, "red" color or "large" size).
   *
   * @memberof ProductConfiguration
   * @type {ProductOptionValue[]}
   */
  values: ProductOptionValue[];
}
/**
 * @export
 * @interface ProductImage
 */
export interface ProductImage {
  /**
   * Media resource URL
   *
   * @memberof ProductImage
   * @type {string}
   */
  url: string;
  /**
   * Media resource label
   *
   * @memberof ProductImage
   * @type {string}
   */
  label?: string;
  /**
   * Roles associated with this image that determine how the image is used on the storefront. - `BASE`: Product image is
   * visible as a main image on the Product Detail Page. - `SMALL`: Product image is visible as a main image on the
   * Category or search result page or other product listing pages. - `THUMBNAIL`: Thumbnail images appear in the
   * thumbnail gallery, shopping cart, etc. - `SWATCH`: A swatch can be used to illustrate the color, pattern, or
   * texture.
   *
   * @memberof ProductImage
   * @type {ProductImageRolesEnum[]}
   */
  roles?: ProductImageRolesEnum[];
  /**
   * Custom image role. Merchants can define custom roles in addition to the predefined values.
   *
   * @memberof ProductImage
   * @type {string[]}
   */
  customRoles?: string[];
}
/**
 * Product association
 *
 * @export
 * @interface ProductLink
 */
export interface ProductLink {
  /**
   * Product link type. Merchants can define custom types in addition to the predefined values. - `VARIANT_OF` link type
   * must be specified to establish a connection to the configurable product SKU. - `IN_BUNDLE` link type must be
   * specified to establish a connection to the bundle product SKU.
   *
   * @memberof ProductLink
   * @type {string}
   */
  type: string;
  /**
   * Product SKU
   *
   * @memberof ProductLink
   * @type {string}
   */
  sku: string;
}
/**
 * @export
 * @interface ProductMetaAttribute
 */
export interface ProductMetaAttribute {
  /**
   * A meta title
   *
   * @memberof ProductMetaAttribute
   * @type {string}
   */
  title?: string;
  /**
   * A meta keywords
   *
   * @memberof ProductMetaAttribute
   * @type {string[]}
   */
  keywords?: string[];
  /**
   * A meta description
   *
   * @memberof ProductMetaAttribute
   * @type {string}
   */
  description?: string;
}
/**
 * @export
 * @interface ProductOptionValue
 */
export interface ProductOptionValue {
  /**
   * Option value ID. For `CONFIGURABLE` or `SWATCH` option types, this ID must match the
   * ["variantReferenceId"](#operation/createProducts!path=attributes/variantReferenceId&t=request) defined in the
   * product variant.
   *
   * @memberof ProductOptionValue
   * @type {string}
   */
  variantReferenceId: string;
  /**
   * Option value label
   *
   * @memberof ProductOptionValue
   * @type {string}
   */
  label?: string;
  /**
   * A hex representation of the color of the option value. Can be used for option with a SWATCH type.
   *
   * @memberof ProductOptionValue
   * @type {string}
   */
  colorHex?: string;
  /**
   * Image URL of the option value. Can be used for option with a SWATCH type.
   *
   * @memberof ProductOptionValue
   * @type {string}
   */
  imageUrl?: string;
}
/**
 * @export
 * @interface ProductRoutes
 */
export interface ProductRoutes {
  /**
   * URL path
   *
   * @memberof ProductRoutes
   * @type {string}
   */
  path: string;
  /**
   * Position of a product in the URL path. The default value is 0.
   *
   * @memberof ProductRoutes
   * @type {number}
   */
  position?: number;
}
/**
 * Scope of the entity. For example it's locale "English"
 *
 * @export
 * @interface Scope
 */
export interface Scope {
  /**
   * A single value that represents content locale, for example, English.
   *
   * @memberof Scope
   * @type {string}
   */
  locale: string;
}

// Manually define any enum types that are referenced but not generated
/**
 * Enum for FeedMetadata.visibleIn
 *
 * @export
 * @enum {string}
 */
export enum FeedMetadataVisibleInEnum {
  ProductDetail = 'PRODUCT_DETAIL',
  ProductListing = 'PRODUCT_LISTING',
  SearchResults = 'SEARCH_RESULTS',
  ProductCompare = 'PRODUCT_COMPARE',
}
/**
 * Enum for FeedMetadata.dataType
 *
 * @export
 * @enum {string}
 */
export enum FeedMetadataDataTypeEnum {
  Text = 'TEXT',
  Decimal = 'DECIMAL',
  Integer = 'INTEGER',
  Boolean = 'BOOLEAN',
}
/**
 * Enum for FeedMetadata.searchTypes
 *
 * @export
 * @enum {string}
 */
export enum FeedMetadataSearchTypesEnum {
  Autocomplete = 'AUTOCOMPLETE',
  Contains = 'CONTAINS',
  StartsWith = 'STARTS_WITH',
}
/**
 * Enum for FeedMetadataUpdate.visibleIn
 *
 * @export
 * @enum {string}
 */
export enum FeedMetadataUpdateVisibleInEnum {
  ProductDetail = 'PRODUCT_DETAIL',
  ProductListing = 'PRODUCT_LISTING',
  SearchResults = 'SEARCH_RESULTS',
  ProductCompare = 'PRODUCT_COMPARE',
}
/**
 * Enum for FeedMetadataUpdate.dataType
 *
 * @export
 * @enum {string}
 */
export enum FeedMetadataUpdateDataTypeEnum {
  Text = 'TEXT',
  Decimal = 'DECIMAL',
  Integer = 'INTEGER',
  Boolean = 'BOOLEAN',
}
/**
 * Enum for FeedMetadataUpdate.searchTypes
 *
 * @export
 * @enum {string}
 */
export enum FeedMetadataUpdateSearchTypesEnum {
  Autocomplete = 'AUTOCOMPLETE',
  Contains = 'CONTAINS',
  StartsWith = 'STARTS_WITH',
}
/**
 * Enum for FeedProduct.status
 *
 * @export
 * @enum {string}
 */
export enum FeedProductStatusEnum {
  Enabled = 'ENABLED',
  Disabled = 'DISABLED',
}
/**
 * Enum for FeedProduct.visibleIn
 *
 * @export
 * @enum {string}
 */
export enum FeedProductVisibleInEnum {
  Catalog = 'CATALOG',
  Search = 'SEARCH',
}
/**
 * Enum for FeedProductUpdate.status
 *
 * @export
 * @enum {string}
 */
export enum FeedProductUpdateStatusEnum {
  Enabled = 'ENABLED',
  Disabled = 'DISABLED',
}
/**
 * Enum for FeedProductUpdate.visibleIn
 *
 * @export
 * @enum {string}
 */
export enum FeedProductUpdateVisibleInEnum {
  Catalog = 'CATALOG',
  Search = 'SEARCH',
}
/**
 * Enum for ProductAttribute.type
 *
 * @export
 * @enum {string}
 */
export enum ProductAttributeTypeEnum {
  Boolean = 'BOOLEAN',
  Number = 'NUMBER',
  String = 'STRING',
  Array = 'ARRAY',
  Object = 'OBJECT',
}
/**
 * Enum for ProductConfiguration.type
 *
 * @export
 * @enum {string}
 */
export enum ProductConfigurationTypeEnum {
  Configurable = 'CONFIGURABLE',
  Swatch = 'SWATCH',
}
/**
 * Enum for ProductImage.roles
 *
 * @export
 * @enum {string}
 */
export enum ProductImageRolesEnum {
  Base = 'BASE',
  Small = 'SMALL',
  Thumbnail = 'THUMBNAIL',
  Swatch = 'SWATCH',
}

/**
 * Adobe IMS credentials
 *
 * @param clientId - The client ID for the API requests
 * @param clientSecret - The client secret for the API requests
 */
export interface AdobeCredentials {
  clientId: string;
  clientSecret: string;
}

export type Region = 'na1';

export type Environment = 'production' | 'sandbox';

/**
 * Client configuration
 *
 * @param credentials - Adobe IMS credentials for authentication
 * @param tenantId - The tenant ID for the API requests
 * @param region - The region for the API endpoint (e.g., 'us', 'eu')
 * @param environment - The environment to use ('production' or 'sandbox')
 * @param timeoutMs - The timeout for the API requests. Default is 10000ms.
 * @param logger - Optional logger for customizing logging behavior. Default is consoleLogger(LogLevel.INFO).
 */
export interface ClientConfig {
  credentials: AdobeCredentials;
  tenantId: string;
  region: Region;
  environment: Environment;
  timeoutMs?: number;
  logger?: Logger;
}

/**
 * API response
 *
 * @param ok - Whether the request was successful
 * @param status - The status code of the response
 * @param statusText - The status text of the response
 * @param data - The processed feed response data
 */
export interface ApiResponse {
  ok: boolean;
  status: number;
  statusText: string;
  data: ProcessFeedResponse;
}

/**
 * Logger interface for customizing logging behavior
 *
 * @param debug - Log a debug message
 * @param info - Log an info message
 * @param warn - Log a warning message
 * @param error - Log an error message
 */
export interface Logger {
  debug(message: string, ...args: unknown[]): void;
  info(message: string, ...args: unknown[]): void;
  warn(message: string, ...args: unknown[]): void;
  error(message: string, error?: Error, ...args: unknown[]): void;
}

/**
 * Log level
 *
 * @param DEBUG - Debug log level
 * @param INFO - Info log level
 * @param WARN - Warning log level
 * @param ERROR - Error log level
 */
export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
}
