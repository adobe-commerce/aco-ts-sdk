/**
 * Catalog Data Ingestion API
 * The Catalog Data Ingestion API allows you to create and manage products and price books and directly integrate catalog data with the Commerce catalog service.   This API provides the following resource collections to create and update catalog data:   - **Metadata**—define and manage product attribute display on the storefront, define search characteristics, and so on  - **Products**—define and manage items to include in a commerce catalog. Each product can have multiple attributes like name, description, SKU, images, etc.  - **Price books**—define and manage unique scopes that can be used to manage product price discounts across customer tiers  - **Prices**—define and manage the prices associated with product SKUs and assign the pricing scope where the price is used 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * 
 * @export
 * @interface DiscountsFinalPrice
 */
export interface DiscountsFinalPrice {
    /**
     * 
     * @type {string}
     * @memberof DiscountsFinalPrice
     */
    code?: string;
    /**
     * 
     * @type {number}
     * @memberof DiscountsFinalPrice
     */
    price?: number;
}
/**
 * 
 * @export
 * @interface DiscountsPercentage
 */
export interface DiscountsPercentage {
    /**
     * 
     * @type {string}
     * @memberof DiscountsPercentage
     */
    code?: string;
    /**
     * 
     * @type {number}
     * @memberof DiscountsPercentage
     */
    percentage?: number;
}
/**
 * 
 * @export
 * @interface FeedItemFailedValidationResult
 */
export interface FeedItemFailedValidationResult {
    /**
     * Code name of invalid field.
     * @type {string}
     * @memberof FeedItemFailedValidationResult
     */
    code?: string;
    /**
     * Reference to the line item with an invalid payload. The line count begins at 0.
     * @type {number}
     * @memberof FeedItemFailedValidationResult
     */
    itemIndex?: number;
    /**
     * Error description
     * @type {string}
     * @memberof FeedItemFailedValidationResult
     */
    message?: string;
    /**
     * Original value passed in the request.
     * @type {string}
     * @memberof FeedItemFailedValidationResult
     */
    value?: string;
}
/**
 * Metadata information for a product attribute.
 * @export
 * @interface FeedMetadata
 */
export interface FeedMetadata {
    /**
     * Attribute code
     * @type {string}
     * @memberof FeedMetadata
     */
    code: string;
    /**
     * 
     * @type {Scope}
     * @memberof FeedMetadata
     */
    scope: Scope;
    /**
     * Determines how the attribute is used on the storefront. * `PRODUCT_DETAIL`: Product attribute is visible on the Product Detail Page. * `PRODUCT_LISTING`: Product attribute is visible on Product Listing Page. * `SEARCH_RESULTS`: Product attribute is visible on Search Results Page. * `PRODUCT_COMPARE`: Product attribute is visible on Product Compare Page. 
     * @type {Array&lt;string&gt;}
     * @memberof FeedMetadata
     */
    visibleIn?: Array<FeedMetadataVisibleInEnum>;
    /**
     * Label for the attribute that is displayed in user interfaces.
     * @type {string}
     * @memberof FeedMetadata
     */
    label: string;
    /**
     * Data type
     * @type {string}
     * @memberof FeedMetadata
     */
    dataType: FeedMetadataDataTypeEnum;
    /**
     * Indicates whether the attribute can be used to filter products.
     * @type {boolean}
     * @memberof FeedMetadata
     */
    filterable?: boolean;
    /**
     * Indicates whether the attribute can be used to sort products.
     * @type {boolean}
     * @memberof FeedMetadata
     */
    sortable?: boolean;
    /**
     * Indicates whether the attribute value can be used in search queries to filter results.
     * @type {boolean}
     * @memberof FeedMetadata
     */
    searchable?: boolean;
    /**
     * The weight associated with a searchable attribute. Attributes with a greater weight are returned before attributes with a lower weight. 
     * @type {number}
     * @memberof FeedMetadata
     */
    searchWeight?: number;
    /**
     * Search types associated with this attribute, for example: `autocomplete`, `starts_with`, and so on. 
     * @type {Array&lt;string&gt;}
     * @memberof FeedMetadata
     */
    searchTypes?: Array<FeedMetadataSearchTypesEnum>;
}
/**
 * Delete metadata information for a product attribute.
 * @export
 * @interface FeedMetadataDelete
 */
export interface FeedMetadataDelete {
    /**
     * Attribute code
     * @type {string}
     * @memberof FeedMetadataDelete
     */
    code: string;
    /**
     * 
     * @type {Scope}
     * @memberof FeedMetadataDelete
     */
    scope: Scope;
}
/**
 * Metadata information for a product attribute.
 * @export
 * @interface FeedMetadataUpdate
 */
export interface FeedMetadataUpdate {
    /**
     * Attribute code
     * @type {string}
     * @memberof FeedMetadataUpdate
     */
    code: string;
    /**
     * 
     * @type {Scope}
     * @memberof FeedMetadataUpdate
     */
    scope: Scope;
    /**
     * Determines how the attribute is used on the storefront. * `PRODUCT_DETAIL`: Product attribute is visible on the Product Detail Page. * `PRODUCT_LISTING`: Product attribute is visible on Product Listing Page. * `SEARCH_RESULTS`: Product attribute is visible on Search Results Page. * `PRODUCT_COMPARE`: Product attribute is visible on Product Compare Page. 
     * @type {Array&lt;string&gt;}
     * @memberof FeedMetadataUpdate
     */
    visibleIn?: Array<FeedMetadataUpdateVisibleInEnum>;
    /**
     * Label for the attribute that is displayed in user interfaces.
     * @type {string}
     * @memberof FeedMetadataUpdate
     */
    label?: string;
    /**
     * Data type
     * @type {string}
     * @memberof FeedMetadataUpdate
     */
    dataType?: FeedMetadataUpdateDataTypeEnum;
    /**
     * Indicates whether the attribute can be used to filter products.
     * @type {boolean}
     * @memberof FeedMetadataUpdate
     */
    filterable?: boolean;
    /**
     * Indicates whether the attribute can be used to sort products.
     * @type {boolean}
     * @memberof FeedMetadataUpdate
     */
    sortable?: boolean;
    /**
     * Indicates whether the attribute value can be used in search queries to filter results.
     * @type {boolean}
     * @memberof FeedMetadataUpdate
     */
    searchable?: boolean;
    /**
     * The weight associated with a searchable attribute. Attributes with a greater weight are returned before attributes with a lower weight. 
     * @type {number}
     * @memberof FeedMetadataUpdate
     */
    searchWeight?: number;
    /**
     * Search types associated with this attribute, for example: `autocomplete`, `starts_with`, and so on. 
     * @type {Array&lt;string&gt;}
     * @memberof FeedMetadataUpdate
     */
    searchTypes?: Array<FeedMetadataUpdateSearchTypesEnum>;
}
/**
 * Price book information
 * @export
 * @interface FeedPricebook
 */
export interface FeedPricebook {
    /**
     * Price book id
     * @type {string}
     * @memberof FeedPricebook
     */
    priceBookId: string;
    /**
     * Price book name
     * @type {string}
     * @memberof FeedPricebook
     */
    name?: string;
    /**
     * Price book currency
     * @type {string}
     * @memberof FeedPricebook
     */
    currency?: string;
}
/**
 * Product price information.
 * @export
 * @interface FeedPrices
 */
export interface FeedPrices {
    /**
     * Product SKU
     * @type {string}
     * @memberof FeedPrices
     */
    sku: string;
    /**
     * Price book id
     * @type {string}
     * @memberof FeedPrices
     */
    priceBookId: string;
    /**
     * Regular price
     * @type {number}
     * @memberof FeedPrices
     */
    regular: number;
    /**
     * Active discounts
     * @type {Array&lt;FeedPricesDiscountsInner&gt;}
     * @memberof FeedPrices
     */
    discounts?: Array<FeedPricesDiscountsInner>;
}
/**
 * Delete product price information.
 * @export
 * @interface FeedPricesDelete
 */
export interface FeedPricesDelete {
    /**
     * Product SKU
     * @type {string}
     * @memberof FeedPricesDelete
     */
    sku: string;
    /**
     * Price book id
     * @type {string}
     * @memberof FeedPricesDelete
     */
    priceBookId: string;
}
/**
 * 
 * @export
 * @interface FeedPricesDiscountsInner
 */
export interface FeedPricesDiscountsInner {
    /**
     * 
     * @type {string}
     * @memberof FeedPricesDiscountsInner
     */
    code?: string;
    /**
     * 
     * @type {number}
     * @memberof FeedPricesDiscountsInner
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof FeedPricesDiscountsInner
     */
    percentage?: number;
}
/**
 * Product price information.
 * @export
 * @interface FeedPricesUpdate
 */
export interface FeedPricesUpdate {
    /**
     * Product SKU
     * @type {string}
     * @memberof FeedPricesUpdate
     */
    sku: string;
    /**
     * Price book id
     * @type {string}
     * @memberof FeedPricesUpdate
     */
    priceBookId: string;
    /**
     * Regular price
     * @type {number}
     * @memberof FeedPricesUpdate
     */
    regular?: number;
    /**
     * Active discounts
     * @type {Array&lt;FeedPricesDiscountsInner&gt;}
     * @memberof FeedPricesUpdate
     */
    discounts?: Array<FeedPricesDiscountsInner>;
}
/**
 * 
 * @export
 * @interface FeedProduct
 */
export interface FeedProduct {
    /**
     * SKU (Stock Keeping Unit) is a unique identifier for a product.
     * @type {string}
     * @memberof FeedProduct
     */
    sku: string;
    /**
     * 
     * @type {Scope}
     * @memberof FeedProduct
     */
    scope: Scope;
    /**
     * Product name
     * @type {string}
     * @memberof FeedProduct
     */
    name: string;
    /**
     * The URL key for the product.
     * @type {string}
     * @memberof FeedProduct
     */
    slug: string;
    /**
     * The main description for the product
     * @type {string}
     * @memberof FeedProduct
     */
    description?: string;
    /**
     * A short description of the product
     * @type {string}
     * @memberof FeedProduct
     */
    shortDescription?: string;
    /**
     * Indicates whether the product is visible on the storefront. The value is \"Enabled\" if it is visible, and \"Disabled\" if it is not visible. 
     * @type {string}
     * @memberof FeedProduct
     */
    status: FeedProductStatusEnum;
    /**
     * Storefront area where the product is visible. An empty list means that it is not visible as a stand alone product. * `CATALOG`: Product is visible on Product Listing Page and Product Detail Page. * `SEARCH`: Product is visible on Search Results Page and Product Detail Page. 
     * @type {Array&lt;string&gt;}
     * @memberof FeedProduct
     */
    visibleIn?: Array<FeedProductVisibleInEnum>;
    /**
     * Meta attributes that are specified in <meta> tags.
     * @type {Array&lt;ProductMetaAttribute&gt;}
     * @memberof FeedProduct
     */
    metaTags?: Array<ProductMetaAttribute>;
    /**
     * A list of product attributes.
     * @type {Array&lt;ProductAttribute&gt;}
     * @memberof FeedProduct
     */
    attributes?: Array<ProductAttribute>;
    /**
     * A list of product images.
     * @type {Array&lt;ProductImage&gt;}
     * @memberof FeedProduct
     */
    images?: Array<ProductImage>;
    /**
     * A list of linked SKUs.
     * @type {Array&lt;ProductLink&gt;}
     * @memberof FeedProduct
     */
    links?: Array<ProductLink>;
    /**
     * A list of product routes.
     * @type {Array&lt;ProductRoutes&gt;}
     * @memberof FeedProduct
     */
    routes?: Array<ProductRoutes>;
    /**
     * Composite products, such as configurable products, must provide a list of product options that a shopper can select (for example, \"color\", \"size\", etc.).
     * @type {Array&lt;ProductOption&gt;}
     * @memberof FeedProduct
     */
    options?: Array<ProductOption>;
}
/**
 * 
 * @export
 * @interface FeedProductDelete
 */
export interface FeedProductDelete {
    /**
     * Product unique identifier
     * @type {string}
     * @memberof FeedProductDelete
     */
    sku: string;
    /**
     * 
     * @type {Scope}
     * @memberof FeedProductDelete
     */
    scope: Scope;
}
/**
 * 
 * @export
 * @interface FeedProductUpdate
 */
export interface FeedProductUpdate {
    /**
     * SKU (Stock Keeping Unit) is a unique identifier for a product.
     * @type {string}
     * @memberof FeedProductUpdate
     */
    sku: string;
    /**
     * 
     * @type {Scope}
     * @memberof FeedProductUpdate
     */
    scope: Scope;
    /**
     * Product name
     * @type {string}
     * @memberof FeedProductUpdate
     */
    name?: string;
    /**
     * The URL key for the product.
     * @type {string}
     * @memberof FeedProductUpdate
     */
    slug?: string;
    /**
     * The main description for the product
     * @type {string}
     * @memberof FeedProductUpdate
     */
    description?: string;
    /**
     * A short description of the product
     * @type {string}
     * @memberof FeedProductUpdate
     */
    shortDescription?: string;
    /**
     * Indicates whether the product is visible on the storefront. The value is \"Enabled\" if it is visible, and \"Disabled\" if it is not visible. 
     * @type {string}
     * @memberof FeedProductUpdate
     */
    status?: FeedProductUpdateStatusEnum;
    /**
     * Storefront area where the product is visible. An empty list means that it is not visible as a stand alone product. * `CATALOG`: Product is visible on Product Listing Page and Product Detail Page. * `SEARCH`: Product is visible on Search Results Page and Product Detail Page. 
     * @type {Array&lt;string&gt;}
     * @memberof FeedProductUpdate
     */
    visibleIn?: Array<FeedProductUpdateVisibleInEnum>;
    /**
     * Meta attributes that are specified in <meta> tags.
     * @type {Array&lt;ProductMetaAttribute&gt;}
     * @memberof FeedProductUpdate
     */
    metaTags?: Array<ProductMetaAttribute>;
    /**
     * A list of product attributes.
     * @type {Array&lt;ProductAttribute&gt;}
     * @memberof FeedProductUpdate
     */
    attributes?: Array<ProductAttribute>;
    /**
     * A list of product images.
     * @type {Array&lt;ProductImage&gt;}
     * @memberof FeedProductUpdate
     */
    images?: Array<ProductImage>;
    /**
     * A list of linked SKUs. For product variants, this is a required field that establishes a link between a product variant and the corresponding configurable product. `VARIANT_OF` link type must be specified to establish a connection to the configurable product SKU. 
     * @type {Array&lt;ProductLink&gt;}
     * @memberof FeedProductUpdate
     */
    links?: Array<ProductLink>;
    /**
     * A list of product routes.
     * @type {Array&lt;ProductRoutes&gt;}
     * @memberof FeedProductUpdate
     */
    routes?: Array<ProductRoutes>;
    /**
     * Options associated with the product.
     * @type {Array&lt;ProductOption&gt;}
     * @memberof FeedProductUpdate
     */
    options?: Array<ProductOption>;
}
/**
 * 
 * @export
 * @interface ItemFailedValidationResult
 */
export interface ItemFailedValidationResult {
    /**
     * Code for the validation error.
     * @type {string}
     * @memberof ItemFailedValidationResult
     */
    code?: string;
    /**
     * Index of the conflicting item
     * @type {number}
     * @memberof ItemFailedValidationResult
     */
    itemIndex?: number;
    /**
     * Validation error message for the item.
     * @type {string}
     * @memberof ItemFailedValidationResult
     */
    message?: string;
    /**
     * The value supplied to the API.
     * @type {string}
     * @memberof ItemFailedValidationResult
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface Model400ProcessFeedResponse
 */
export interface Model400ProcessFeedResponse {
    /**
     * Request status.
     * @type {string}
     * @memberof Model400ProcessFeedResponse
     */
    status?: string;
    /**
     * Error summary.
     * @type {string}
     * @memberof Model400ProcessFeedResponse
     */
    message?: string;
    /**
     * List of items that did not pass validation. Fix the payload for invalid items before resubmitting the request.
     * @type {Array&lt;FeedItemFailedValidationResult&gt;}
     * @memberof Model400ProcessFeedResponse
     */
    errors?: Array<FeedItemFailedValidationResult>;
}
/**
 * 
 * @export
 * @interface Model403Response
 */
export interface Model403Response {
    /**
     * Error code
     * @type {string}
     * @memberof Model403Response
     */
    errorCode?: string;
    /**
     * Error message
     * @type {string}
     * @memberof Model403Response
     */
    message?: string;
    /**
     * 
     * @type {Model403UnauthorizedError}
     * @memberof Model403Response
     */
    error?: Model403UnauthorizedError;
}
/**
 * 
 * @export
 * @interface Model403Unauthorized
 */
export interface Model403Unauthorized {
    /**
     * 
     * @type {Model403UnauthorizedError}
     * @memberof Model403Unauthorized
     */
    error?: Model403UnauthorizedError;
}
/**
 * 
 * @export
 * @interface Model403UnauthorizedError
 */
export interface Model403UnauthorizedError {
    /**
     * Error code
     * @type {string}
     * @memberof Model403UnauthorizedError
     */
    code?: string;
    /**
     * Error message
     * @type {string}
     * @memberof Model403UnauthorizedError
     */
    message?: string;
    /**
     * 
     * @type {Model403UnauthorizedErrorDetails}
     * @memberof Model403UnauthorizedError
     */
    details?: Model403UnauthorizedErrorDetails;
}
/**
 * 
 * @export
 * @interface Model403UnauthorizedErrorDetails
 */
export interface Model403UnauthorizedErrorDetails {
    /**
     * Error code
     * @type {string}
     * @memberof Model403UnauthorizedErrorDetails
     */
    errorCode?: string;
}
/**
 * 
 * @export
 * @interface Model403UnauthorizedInvalidJWT
 */
export interface Model403UnauthorizedInvalidJWT {
    /**
     * Error code
     * @type {string}
     * @memberof Model403UnauthorizedInvalidJWT
     */
    errorCode?: string;
    /**
     * Error message
     * @type {string}
     * @memberof Model403UnauthorizedInvalidJWT
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface ProcessFeedResponse
 */
export interface ProcessFeedResponse {
    /**
     * Request status.
     * @type {string}
     * @memberof ProcessFeedResponse
     */
    status?: string;
    /**
     * The number of received and accepted items.
     * @type {number}
     * @memberof ProcessFeedResponse
     */
    acceptedCount?: number;
}
/**
 * 
 * @export
 * @interface ProductAttribute
 */
export interface ProductAttribute {
    /**
     * Product Attribute Code
     * @type {string}
     * @memberof ProductAttribute
     */
    code: string;
    /**
     * Type of attribute value to be applied during the rendering phase. Validation occurs only when the code is rendered. Invalid values are ignored. - `BOOLEAN`: Accept single value: \"true\" or false - `NUMBER`: Accept single number,e.g. \"85\", \"0.42\", etc. - `STRING`: Accept single string,e.g. \"Great day, yall!\" - `ARRAY`: Accept list of strings ,e.g. [\"red\", \"green\", \"blue\"] - `OBJECT`: Accept JSON object `\"{\"name\": \"swatch\", \"color\": \"red\"}\"` 
     * @type {string}
     * @memberof ProductAttribute
     */
    type: ProductAttributeTypeEnum;
    /**
     * A list of value(s) associated with a specified attribute code.
     * @type {Array&lt;string&gt;}
     * @memberof ProductAttribute
     */
    values: Array<string>;
    /**
     * The variant reference ID establishes a link between a product variant and the corresponding [Option Value ID](#operation/ProductsPost!path=options/values/id&t=request) in a configurable product. Variant reference ID must be defined only for a product that represents a variant of a configurable product. 
     * @type {string}
     * @memberof ProductAttribute
     */
    variantReferenceId?: string;
}
/**
 * 
 * @export
 * @interface ProductImage
 */
export interface ProductImage {
    /**
     * Media resource URL
     * @type {string}
     * @memberof ProductImage
     */
    url: string;
    /**
     * Media resource label
     * @type {string}
     * @memberof ProductImage
     */
    label?: string;
    /**
     * Roles associated with this image that determine how the image is used on the storefront. - `BASE`: Product image is visible as a main image on the Product Detail Page. - `SMALL`: Product image is visible as a main image on the Category or search result page or other product listing pages. - `THUMBNAIL`: Thumbnail images appear in the thumbnail gallery, shopping cart, etc. - `SWATCH`: A swatch can be used to illustrate the color, pattern, or texture. 
     * @type {Array&lt;string&gt;}
     * @memberof ProductImage
     */
    roles?: Array<ProductImageRolesEnum>;
    /**
     * Custom image role. Merchants can define custom roles in addition to the predefined values. 
     * @type {Array&lt;string&gt;}
     * @memberof ProductImage
     */
    customRoles?: Array<string>;
}
/**
 * Product association
 * @export
 * @interface ProductLink
 */
export interface ProductLink {
    /**
     * Product link type. Merchants can define custom types in addition to the predefined values. `VARIANT_OF` link type must be specified to establish a connection to the configurable product SKU. 
     * @type {string}
     * @memberof ProductLink
     */
    type: string;
    /**
     * Product SKU
     * @type {string}
     * @memberof ProductLink
     */
    sku: string;
}
/**
 * 
 * @export
 * @interface ProductMetaAttribute
 */
export interface ProductMetaAttribute {
    /**
     * A meta title
     * @type {string}
     * @memberof ProductMetaAttribute
     */
    title?: string;
    /**
     * A meta keywords
     * @type {Array&lt;string&gt;}
     * @memberof ProductMetaAttribute
     */
    keywords?: Array<string>;
    /**
     * A meta description
     * @type {string}
     * @memberof ProductMetaAttribute
     */
    description?: string;
}
/**
 * 
 * @export
 * @interface ProductOption
 */
export interface ProductOption {
    /**
     * Product option ID. For `CONFIGURABLE` or `SWATCH` option types, this ID must be match the [\"attribute code\"](#operation/ProductsPost!path=attributes/code&t=request) used for the configurable product (for example, \"color\"). 
     * @type {string}
     * @memberof ProductOption
     */
    id: string;
    /**
     * Option label
     * @type {string}
     * @memberof ProductOption
     */
    label?: string;
    /**
     * Indicates whether selecting the option is required by a shopper to add a product to the shopping cart.
     * @type {boolean}
     * @memberof ProductOption
     */
    required?: boolean;
    /**
     * Specifies the pre-selected value id of the current option.
     * @type {string}
     * @memberof ProductOption
     */
    defaultValueId?: string;
    /**
     * Option type. Indicates the product type the option can be assigned to. - `CONFIGURABLE`: Configurable product option - `SWATCH`: Swatch product option. Must be used for color or text swatches attributes 
     * @type {string}
     * @memberof ProductOption
     */
    type: ProductOptionTypeEnum;
    /**
     * A list of option values. Defines option values available to shoppers (for example, \"red\" color or \"large\" size).
     * @type {Array&lt;ProductOptionValue&gt;}
     * @memberof ProductOption
     */
    values: Array<ProductOptionValue>;
}
/**
 * 
 * @export
 * @interface ProductOptionValue
 */
export interface ProductOptionValue {
    /**
     * Option value ID. For `CONFIGURABLE` or `SWATCH` option types, this ID must match the [\"variantReferenceId\"](#operation/ProductsPost!path=attributes/variantReferenceId&t=request) defined in the product variant. 
     * @type {string}
     * @memberof ProductOptionValue
     */
    id: string;
    /**
     * Option value label
     * @type {string}
     * @memberof ProductOptionValue
     */
    label?: string;
    /**
     * A hex representation of the color of the option value. Can be used for option with a SWATCH type.
     * @type {string}
     * @memberof ProductOptionValue
     */
    colorHex?: string;
    /**
     * Image URL of the option value. Can be used for option with a SWATCH type.
     * @type {string}
     * @memberof ProductOptionValue
     */
    imageUrl?: string;
}
/**
 * 
 * @export
 * @interface ProductRoutes
 */
export interface ProductRoutes {
    /**
     * URL path
     * @type {string}
     * @memberof ProductRoutes
     */
    path: string;
    /**
     * Position of a product in the URL path. The default value is 0.
     * @type {number}
     * @memberof ProductRoutes
     */
    position?: number;
}
/**
 * Scope of the entity. For example it\'s locale \"English\"
 * @export
 * @interface Scope
 */
export interface Scope {
    /**
     * A single value that represents content locale, for example, English.
     * @type {string}
     * @memberof Scope
     */
    locale: string;
}

// Manually define any enum types that are referenced but not generated
/**
 * Enum for FeedMetadata.visibleIn
 * @export
 * @enum {string}
 */
export enum FeedMetadataVisibleInEnum {
    ProductDetail = 'PRODUCT_DETAIL',
    ProductListing = 'PRODUCT_LISTING',
    SearchResults = 'SEARCH_RESULTS',
    ProductCompare = 'PRODUCT_COMPARE'
}
/**
 * Enum for FeedMetadata.dataType
 * @export
 * @enum {string}
 */
export enum FeedMetadataDataTypeEnum {
    Text = 'TEXT',
    Decimal = 'DECIMAL',
    Integer = 'INTEGER',
    Boolean = 'BOOLEAN'
}
/**
 * Enum for FeedMetadata.searchTypes
 * @export
 * @enum {string}
 */
export enum FeedMetadataSearchTypesEnum {
    Autocomplete = 'AUTOCOMPLETE',
    Contains = 'CONTAINS',
    StartsWith = 'STARTS_WITH'
}
/**
 * Enum for FeedMetadataUpdate.visibleIn
 * @export
 * @enum {string}
 */
export enum FeedMetadataUpdateVisibleInEnum {
    ProductDetail = 'PRODUCT_DETAIL',
    ProductListing = 'PRODUCT_LISTING',
    SearchResults = 'SEARCH_RESULTS',
    ProductCompare = 'PRODUCT_COMPARE'
}
/**
 * Enum for FeedMetadataUpdate.dataType
 * @export
 * @enum {string}
 */
export enum FeedMetadataUpdateDataTypeEnum {
    Text = 'TEXT',
    Decimal = 'DECIMAL',
    Integer = 'INTEGER',
    Boolean = 'BOOLEAN'
}
/**
 * Enum for FeedMetadataUpdate.searchTypes
 * @export
 * @enum {string}
 */
export enum FeedMetadataUpdateSearchTypesEnum {
    Autocomplete = 'AUTOCOMPLETE',
    Contains = 'CONTAINS',
    StartsWith = 'STARTS_WITH'
}
/**
 * Enum for FeedProduct.status
 * @export
 * @enum {string}
 */
export enum FeedProductStatusEnum {
    Enabled = 'ENABLED',
    Disabled = 'DISABLED'
}
/**
 * Enum for FeedProduct.visibleIn
 * @export
 * @enum {string}
 */
export enum FeedProductVisibleInEnum {
    Catalog = 'CATALOG',
    Search = 'SEARCH'
}
/**
 * Enum for FeedProductUpdate.status
 * @export
 * @enum {string}
 */
export enum FeedProductUpdateStatusEnum {
    Enabled = 'ENABLED',
    Disabled = 'DISABLED'
}
/**
 * Enum for FeedProductUpdate.visibleIn
 * @export
 * @enum {string}
 */
export enum FeedProductUpdateVisibleInEnum {
    Catalog = 'CATALOG',
    Search = 'SEARCH'
}
/**
 * Enum for ProductAttribute.type
 * @export
 * @enum {string}
 */
export enum ProductAttributeTypeEnum {
    Boolean = 'BOOLEAN',
    Number = 'NUMBER',
    String = 'STRING',
    Array = 'ARRAY',
    Object = 'OBJECT'
}
/**
 * Enum for ProductImage.roles
 * @export
 * @enum {string}
 */
export enum ProductImageRolesEnum {
    Base = 'BASE',
    Small = 'SMALL',
    Thumbnail = 'THUMBNAIL',
    Swatch = 'SWATCH'
}
/**
 * Enum for ProductOption.type
 * @export
 * @enum {string}
 */
export enum ProductOptionTypeEnum {
    Configurable = 'CONFIGURABLE',
    Swatch = 'SWATCH'
}

// Config Types
export interface AdobeCredentials {
    clientId: string;
    clientSecret: string;
    scopes: string;
}

export type Region = "na1";

export type Environment = "production" | "sandbox";
